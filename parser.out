Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> A
Rule 1     A -> ID E COLOR W
Rule 2     A -> ID E W
Rule 3     A -> N
Rule 4     A -> ID
Rule 5     A -> ID W
Rule 6     W -> S W C
Rule 7     W -> ID W
Rule 8     W -> G W
Rule 9     W -> D W
Rule 10    W -> ID
Rule 11    W -> D
Rule 12    W -> G
Rule 13    N -> NUMBER

Terminals, with rules where they appear

C                    : 6
COLOR                : 1
D                    : 9 11
E                    : 1 2
G                    : 8 12
ID                   : 1 2 4 5 7 10
NUMBER               : 13
S                    : 6
error                : 

Nonterminals, with rules where they appear

A                    : 0
N                    : 3
W                    : 1 2 5 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . A
    (1) A -> . ID E COLOR W
    (2) A -> . ID E W
    (3) A -> . N
    (4) A -> . ID
    (5) A -> . ID W
    (13) N -> . NUMBER

    ID              shift and go to state 4
    NUMBER          shift and go to state 2

    A                              shift and go to state 1
    N                              shift and go to state 3

state 1

    (0) S' -> A .



state 2

    (13) N -> NUMBER .

    $end            reduce using rule 13 (N -> NUMBER .)


state 3

    (3) A -> N .

    $end            reduce using rule 3 (A -> N .)


state 4

    (1) A -> ID . E COLOR W
    (2) A -> ID . E W
    (4) A -> ID .
    (5) A -> ID . W
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    E               shift and go to state 5
    $end            reduce using rule 4 (A -> ID .)
    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 9

state 5

    (1) A -> ID E . COLOR W
    (2) A -> ID E . W
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    COLOR           shift and go to state 11
    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 12

state 6

    (9) W -> D . W
    (11) W -> D .
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    C               reduce using rule 11 (W -> D .)
    $end            reduce using rule 11 (W -> D .)
    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 13

state 7

    (8) W -> G . W
    (12) W -> G .
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    C               reduce using rule 12 (W -> G .)
    $end            reduce using rule 12 (W -> G .)
    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 14

state 8

    (6) W -> S . W C
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 15

state 9

    (5) A -> ID W .

    $end            reduce using rule 5 (A -> ID W .)


state 10

    (7) W -> ID . W
    (10) W -> ID .
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    C               reduce using rule 10 (W -> ID .)
    $end            reduce using rule 10 (W -> ID .)
    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 16

state 11

    (1) A -> ID E COLOR . W
    (6) W -> . S W C
    (7) W -> . ID W
    (8) W -> . G W
    (9) W -> . D W
    (10) W -> . ID
    (11) W -> . D
    (12) W -> . G

    S               shift and go to state 8
    ID              shift and go to state 10
    G               shift and go to state 7
    D               shift and go to state 6

    W                              shift and go to state 17

state 12

    (2) A -> ID E W .

    $end            reduce using rule 2 (A -> ID E W .)


state 13

    (9) W -> D W .

    C               reduce using rule 9 (W -> D W .)
    $end            reduce using rule 9 (W -> D W .)


state 14

    (8) W -> G W .

    C               reduce using rule 8 (W -> G W .)
    $end            reduce using rule 8 (W -> G W .)


state 15

    (6) W -> S W . C

    C               shift and go to state 18


state 16

    (7) W -> ID W .

    C               reduce using rule 7 (W -> ID W .)
    $end            reduce using rule 7 (W -> ID W .)


state 17

    (1) A -> ID E COLOR W .

    $end            reduce using rule 1 (A -> ID E COLOR W .)


state 18

    (6) W -> S W C .

    C               reduce using rule 6 (W -> S W C .)
    $end            reduce using rule 6 (W -> S W C .)

